#! /usr/bin/perl

use strict;
use warnings;

use JSON::MaybeXS;
use HTTP::Request ();
use HTTP::Request::Common;
use LWP::UserAgent;
use Getopt::Std;

my %o=(c => $ENV{HOME}.'/.icinga-api.json');
getopts('hc:dm:ua',\%o);
if ($o{h}) {
  print STDERR <<EOF;
Usage: $0 (-c CONFFILE) -d (-m MESSAGE) HOST (HOST...) (DURATION)
       $0 (-c CONFFILE) -u HOST (HOST...)
       $0 (-c CONFFILE) -u -a
       $0 (-c CONFFILE)

-d puts hosts/services into downtime with message and duration
DURATION defaults to 2h (2 hours); full spec is NdNhNmNs

-u brings hosts/services out of downtime
-u -a brings all hosts and services out of downtime

With neither -d nor -u, list downtimes.

HOST is one of:
- HOSTNAME (implies all services)
- HOSTNAME/SERVICE
- HOSTNAME/SERVICE,SERVICE
EOF
}

my $c={};
{
  open my $fh,'<:encoding(utf-8)',$o{c};
  $c=decode_json(join('',<$fh>));
  close $fh;
}

my $ua = LWP::UserAgent->new();

my %validhost;
my $j=apiget($ua,$c,'objects/hosts');
foreach my $hostdata (@{$j->{results}}) {
  $validhost{$hostdata->{attrs}{name}}=1;
}

my $duration=7200;
my %namedhost;

if ($o{a}) {
  %namedhost=%validhost;
}
foreach my $a (@ARGV) {
  if (exists $validhost{$a}) {
    $namedhost{$a}=1;
  } elsif ($a =~ /(.*)\// && exists $validhost{$1}) {
    $namedhost{$a}=1;
  } elsif ($a =~ /(?:([0-9]+)d)?(?:([0-9]+)h)?(?:([0-9]+)m)?(?:([0-9]+)s)?/) {
    my $dd=($1 || 0) * 86400 + ($2 || 0) * 3600 + ($3 || 0) * 60 + ($4 || 0);
    if ($dd > 0) {
      $duration=$dd;
    }
  }
}

if ($o{d}) {
  my @active;
  foreach my $h (keys %namedhost) {
    if ($h =~ m!(.+)/(.+)!) {
      my ($host,$servs) = ($1,$2);
      foreach my $service (split ',', $servs) {
        my %d=(
          type => 'Service',
          filter => 'host.name=="' . $host . '" && service.name=="' . $service . '"',
          author => 'icingaadmin',
          comment => $o{m} || 'Downtime set by icy-downtime',
          fixed => JSON()->true,
          start_time => time,
          end_time => time + $duration,
            );
        apipost($ua,$c,'/actions/schedule-downtime',\%d);
      }
    } else {
      my %d=(
        type => 'Host',
        filter => 'host.name=="' . $h . '"',
        author => 'icingaadmin',
        comment => $o{m} || 'Downtime set by icy-downtime',
        fixed => JSON()->true,
        start_time => time,
        end_time => time + $duration,
        all_services => JSON()->true,
          );
      apipost($ua,$c,'/actions/schedule-downtime',\%d);
    }
  }
} elsif ($o{u}) {
  my $downs=apiget($ua,$c,'/objects/downtimes');
  foreach my $k (grep m!/.*,!, keys %namedhost) {
    $k =~ m!(.+)/(.+)!;
    my ($host,$servs) = ($1,$2);
    delete $namedhost{$k};
    foreach my $service (split ',', $servs) {
      $namedhost{"$host/$service"} = 1;
    }
  }
  foreach my $down (@{$downs->{results}}) {
    if (exists $namedhost{$down->{attrs}{host_name}} ||
        exists $namedhost{$down->{attrs}{host_name} . '/' . $down->{attrs}{service_name}} ) {
      my %d=(downtime => $down->{name});
      apipost($ua,$c,'/actions/remove-downtime',\%d);
    }
  }
} else {                        # list downtimes?
  my $downs=apiget($ua,$c,'/objects/downtimes');
  my %dh;
  foreach my $down (@{$downs->{results}}) {
    unless (exists $dh{$down->{attrs}{host_name}}) {
      $dh{$down->{attrs}{host_name}}={
        until => $down->{attrs}{end_time},
        services => [],
      };
    }
    if ($down->{attrs}{service_name} ne '') {
      my $k = $down->{attrs}{service_name};
      if ($down->{attrs}{end_time} ne $dh{$down->{attrs}{host_name}}{until}) {
        $k .= '*';
      }
      push @{$dh{$down->{attrs}{host_name}}{services}},$k;
    }
  }
  foreach my $h (sort keys %dh) {
    print "$h -> ".(scalar localtime $dh{$h}{until})."\n";
    print join(', ',sort @{$dh{$h}{services}})."\n";
  }
}

sub apiget {
  my ($ua,$c,$endpoint) = @_;
  my $r=HTTP::Request::Common::GET(
    "https://$c->{host}:$c->{port}/v1/$endpoint",
      );
  $r->authorization_basic($c->{username},$c->{password});
  my $res=$ua->request($r);
  if ($res->is_success) {
    return decode_json($res->content);
  } else {
    print $res->status_line;
    print "\n";
    print $res->content;
    die;
  }
}

sub apipost {
  my ($ua,$c,$endpoint,$data) = @_;
  my $r=HTTP::Request::Common::POST(
    "https://$c->{host}:$c->{port}/v1/$endpoint",
      );
  $r->header(Accept => 'application/json');
  my $cc=encode_json($data);
  $r->content($cc);
  $r->header('Content-Length' => length($cc));
  $r->authorization_basic($c->{username},$c->{password});
  my $res=$ua->request($r);
  if ($res->is_success) {
    return decode_json($res->content);
  } else {
    print $res->status_line;
    print "\n";
    print $res->content;
    die;
  }
}
