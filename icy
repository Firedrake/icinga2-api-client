#! /usr/bin/perl

use strict;
use warnings;

use JSON::MaybeXS;
use HTTP::Request ();
use HTTP::Request::Common;
use LWP::UserAgent;
use Getopt::Std;

my %o=(c => $ENV{HOME}.'/.icinga-api.json');
getopts('has:c:',\%o);
if ($o{h}) {
  print STDERR <<EOF;
Usage: $0 (-c CONFFILE) (-a) (-s SERVICE) (HOSTNAME) (HOSTNAME...)
-c points to Icinga credentials file ($o{c})
-a lists all host/service states, even "OK"
-s lists only services that match SERVICE
HOSTNAME excludes all other hosts
EOF
}

my %hostfilter=map {$_ => 1} @ARGV;

my $c={};
{
  open my $fh,'<:encoding(utf-8)',$o{c};
  $c=decode_json(join('',<$fh>));
  close $fh;
}

my $ua = LWP::UserAgent->new();

my %hoststat;
my $j=apiget($ua,$c,'objects/hosts');
foreach my $hostdata (@{$j->{results}}) {
  if ($hostdata->{attrs}{active} && $hostdata->{attrs}{state} != 0) {
    $hoststat{$hostdata->{attrs}{name}}=$hostdata->{attrs}{last_check_result}{output};
  }
}

{
  my $j=apiget($ua,$c,'objects/services');
  my %out;
  foreach my $srvdata (@{$j->{results}}) {
    if ($srvdata->{attrs}{active}) {
      if ($o{a} ||
          $srvdata->{attrs}{state} != 0) {
        if (!$o{s} ||
            $srvdata->{attrs}{display_name} =~ /$o{s}/i) {
          $out{$srvdata->{attrs}{host_name}}{$srvdata->{attrs}{name}}=$srvdata;
        }
      }
    }
  }
  foreach my $host (sort keys %out) {
    my $hostline="$host: ";
    if (exists $hoststat{$host}) {
      $hostline .= $hoststat{$host};
    }
    if (keys %hostfilter && (!exists $hostfilter{$host} || !$o{a})) {
      next;
    }
    print "$hostline\n";
    unless (exists $hoststat{$host} && !$o{a}) {
      foreach my $service (sort keys %{$out{$host}}) {
        print "$service: ".$out{$host}{$service}{attrs}{last_check_result}{output}."\n";
      }
    }
    print "\n";
  }
}

sub apiget {
  my ($ua,$c,$endpoint) = @_;
  my $r=HTTP::Request::Common::GET(
    "https://$c->{host}:$c->{port}/v1/$endpoint",
      );
  $r->authorization_basic($c->{username},$c->{password});
  my $res=$ua->request($r);
  if ($res->is_success) {
    return decode_json($res->content);
  } else {
    print $res->status_line;
    print "\n";
    print $res->content;
    die;
  }
}
